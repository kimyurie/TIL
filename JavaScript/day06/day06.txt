(ㄴ이것만 기억! 면접에 나올 수 있음)

자바스크립트에서 
이터러블, 이터레이터
(iterable, iterator)

이터러블하다는 것은 자료를 반복할 수 있다. 
for of, for문 사용이 가능한가 // ㄴ걍 이해안가면 for문 사용 가능하면 iterable한 객체 구나 하고 넘어가센

iterable
iterator를 변환하는 [Symbol.iterator]()메서드를 가진 객체
ex) 배열, 문자열, set, map

iterator
{value: 값, done: t/f}형의 이터레이터 객체를 리턴하는 next() 메서드를 가진 객체
next 메서드로 순환할 수 있는 객체
[Symbol.iterator]() 안에 내장

------------------------------------------------------------------------------------------------------------

Set
셋(set)은 중복을 허용하지 않는 값을 모아놓은 특별한 컬렉션(객체)
셋에는 키가 없는 값이 저장 / ㄴ 셋은 중복을 제거해준당
이터러블 객체를 파라미터로 전달받은 (보통 배열)

let set = new Set([1,1,2,2,3,4,3,5])
console.log(set) {1,2,3,4,5} 

set.add(value) - 값을 추가하고 반환 값은 추가된 set 자신
ex) set.add(6)
    {1,2,3,4,5,6}

set.delete(value) - 값을 삭제하고 값은 boolean을 반환
set.has(value) - 값이 존재하는지 확인 반환 값은 boolean을 반환
set.clear() - 셋을 전체 삭제
set.size - 전체 셋에 몇개의 데이터가 저장 되어있는지
set.keys, set.vlaues, set.entries() => map과 연관 ㄴ 얜 걍 참고만

* 이터러블 객체의 중복 데이터를 삭제하기 위해 사용

ex) for(const number of set){
    console.log(number);
}

------------------------------------------------------------------------------------------------------------

전개 연산자(전개 구문)

깊은 복사, 복사
오브젝트를 전개한다
------------------

const arr = [1,2,3,4,5]
...arr = 1,2,3,4,5

const newArr = [...arr] (깊은 복사)

------------------------------------------------------------------------------------------------------------
map 
키가 있는 데이터를 저장한다는 점에서 객체와 유사
다만, 맵은 키에 문자열이 아닌 다양한 자료형을 허용한다는 점에서 차이가 있음

const map = new Map()
map.set(key, value)
map[key] = value(올바른 사용방법이 아닙니다. 이 방법은 map을 객체로 취급하게 됨) == x
map.get(key) = 해당 키 값의 데이터 반환
map.has(key) = 해당 키 값이 있는지 판단 boolean 반환
map.delete(key) = 해당 키 값 삭제
map.clear() = 모든 map 요소 삭제
map.size() = map 요소 개수를 반환

ex)
const map = new Map([[key, value], ["name", "Seongyong"], ["age", 20]])

------------------------------------------------------------------------------------------------------------

삼항 연산자

조건식 ? = 참일 때 실행 : 거짓일 때 실행;
const answer = 3 > 0 ? 3 : 0;

------------------------------------------------------------------------------------------------------------

Truty와 Falsy

Truty는 말그대로 True 같은 것
Falsy는 False 같은 것
(NaN, undefined, null, 0, "", false) ㄴ 얘네 뺴고는 다 true

if(true) = true
if({}) = true
if([]) = true
if("0") = true
if("false") = true
if(-Infinity) = true

* 중요한 것은 언제 사용하느냐? (undefined, null, "")
값이 있는지 없는지 검사하기 위해 사용

ex) 

if(!chat) return;
.. 메세지 전송

------------------------------------------------------------------------------------------------------------

early return

    로직이 짧은 경우에는 굉장히 가독성이 좋은 코드
    로직이 길다면?
        탈출, 종료문이 많다는 것 = 분기점이 많다는 것 = 가독성이 좋아지지 않음 <--- (반박)모듈화로 함수 나눠라

    ex)
    if(!a) return;

    if(a){
        ..
    }else {
        return;
    }  // 얘를 위의 코드로 개선한것

------------------------------------------------------------------------------------------------------------

비구조화할당, 구조분해 (ㄴconst 중괄호, 대괄호 나오면 무조건 구조분해 할당! / 객체가 들어가야 할 자리에 키값이 있는 경우도!)

구조분해할당(비구조화할당)은 배열이나 객체의 속성을 해체하여
그 값을 개별 변수에 담을 수 있게 하는 표현식입니다. 

ex) 객체의 경우
const Seongyong = {
    name : "Seongyong",
    age : 20,
    height : 190
}

/*
const age = Seongyong.age || Seongyong['age']
const height = Seongyong.height || Seongyong['height']
*/

const {age: seongyongAge, height} = Seongyong;

변수명 중복과 가독성있는 변수명을 위하여 별칭을 지어준다.

console.log(seongyongAge, height); // 20, 190

------------------------------------------------------------------------------------------------------------

ex) 배열의 경우
        const arr = ["Seongyong", "TaeGi"];
        const [seongyongName, taegiName] = arr;

        인덱스에 맞는 데이터가 변수로서 할당
        console.log(seongyongName, taegiName)

        const arr = [{...}, {...}]
        const [obj1, obj2] = arr;
        const {obj1Name, obj1Height} = obj1;

------------------------------------------------------------------------------------------------------------







