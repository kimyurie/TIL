React JS란?
복잡한 사용자 인터페이스(UI)를 쉽게 구축하기 위해 페이스북에서
제작한 java script로 만든 라이브러리

라이브러리?(도서관 = 모듈[코드 덩어리]의 집합)

프레임워크와 라이브러리의 차이점

  * 프레임워크?
  코드를 만들 때 필요한 뼈대와 틀을 제공해주는 것
  따라서 프레임워크에서 개발을 할 때는 해당 프레임워크가 가지고
  있는 규칙에 의해 작성, 즉 제어권이 프레임워크가 가지고
  있는 것

  ex) spring, django, nextJS, nuxtJS,jquery

  * 라이브러리?
  같은 로그인 로직이라 하더라도 passportJS, gotrue,
  즉 사용자는 특정 규칙이 아닌 필요로 하는 라이브러리를 선택해서
 사용하는 것이 아니라, 필요로 하는 라이브러리를 선택해서 코드에
 적용. 
  
  ex) nodeJS에서 설치되는 패키지, reactJS, jquery

  => * 이것만 기억! 
  프레임 워크는 기계, 따라서 정해진 사용법에 의거하여 사용
  라이브러리는 도구함, 내가 원하는 도구를 선택해서 사용


NodeJS?
    react는 nodeJS의 환경에 의해 실행.

    구글 크롬의 v8엔진을 활용하여 브라우저 밖에서도 자바스크
    립트를 컴파일 혹은 실행할 수 있는 일종의 런타임(실행 환경)

    설치
    https://nodejs.org/ko/

    확인 터미널 혹은 cmd(명령 프롬프트 창)에서
    node -v

-----------------------------------------------------------

* React JS 구동원리 핵심 컨셉
  - re-render와 component

+ 랜더링 -> 화면에 그려주는 것

Component
 - 하나의 페이지를 한 가지 이상의 기능을 수행하는 UI 단위로 분리한 것
 - 재사용이 용이하고 관리 및 유지 보수에 효율적

Virtual Dom 
- react가 가지고 있는 가상 돔, 진짜 돔의 복사본
- state(상태)를 react에서 구독, 만약 state의 변화가 생긴다면 그 때
가상돔과 실제돔을 비교하여 수정된 부분만을 실제돔에 리렌더링
- 바뀐 컴포넌트만 랜더링을 시킨다는 것

1. state의 변화가 생긴다면
2. 수정된 부분(컴포넌트)만을 실제 돔에 리렌더링
  (렌더링 최적화)

***key point

리엑트의 상태,값(state)
컴포넌트(UI 분리)
가상돔(re-rendering)

----------------------------------------------------------

CSR, SSR, SPA, MPA

----------------------------------------------------------

CSR VS SSR

CSR(Client Side Rendering)
* 사용자가 웹 페이지를 그린다
사용자가 웹 페이지에 접속 -> 프론트엔드 서버에 페이지를 랜더링할 때 필요한 
리소스(code, asset) 전달

ex) 페이지가 로드 되었을 때 상품 목록을 그려준다.
    이 상품 목록은 백엔드 서버로부터 응답 받은 데이터이다.

=> 위 과정을 사용자가 하게되는 것
사용자가 랜더링을 부담
(html, css, js 등 페이지 랜더링에 필요한 리소스가 모두
로드 된 후 사용자가 화면을 확인 가능)

(ㄴ화면과 js가 모두 로드되고 나서 화면을 보여줌)

장점
: 페이지에 필요한 리소스(js)를 사전에 미리 불러와 데이터를 캐싱(저장)하고
있다가 URL에 맞는 페이지를 보여주기 때문에 초기 랜더링 이후의 렌더링 속도가 빠르다

단점
: 초기 페이지 로딩이 SSR보다 느리다
  SEO(검색엔진최적화)에 불리
  검색엔진에 노출이 필요한 사이트 부적합(페이지가 검색엔진이 검색하였을 떄 빈화면이 노출)






SSR (Server Side Rendering)    ex)바닐라js
: 서버에서 페이지를 그린다
사용자가 웹 페이지에 접속 -> 서버에서 페이지를 렌더링
-> 렌더링된 페이지를 사용자에게 전달

js가 로드 되기 전에 완성된 페이지를 사용자가 먼저 확인

=> 서버가 랜더링(ㄴ그린다,페이지를 보여준다) 부담
(페이지 랜더링에 필요한 최소한의 리소스를 서버에서 그린 후
전달, 사용자는 다른 부가적인 리소스가 적용되기 전에 화면을
확인 가능)

(ㄴ화면을 먼저 보여주고 그 다음 다른 js가 로드)

장점
- SEO(검색 엔진 최적화) ㄴ검색엔진(사이트에 대한 정보 수집)
(ㄴ들어왔을 때 이미 페이지가 완성되어 있으므로)

=> 웹 사이트를 검색엔진이 크롤링(읽기)하여 사용자에게 제공 가능
- 빠른 첫페이지 로딩 속도
- 서버에서 랜더를 부담하기 때문에 사용자가 느끼는 부담이 덜함


단점
- 서버의 부담(생산 비용 증가)
- 무거운 페이지라면 오히려 초기 페이지로딩이 CSR보다 오래 걸릴 가능성
- CSR보다 더 많은 생산비용(코드를 많이 쳐야함, 인력),
추가 러닝 커브(ㄴ더많이 배워야함)


React는 대표적인 CSR, SPA

* SSR
 : 서버에서 그린 후 페이지 전달

* CSR
 : 사용자가 페이지를 그린다

* SPA
 : 페이지가 1개

* MPA 
 : 페이지가 여러개

----------------------------------------------------------

----------------------------------------------------------

* p.s
개념강의(1회) - 텍스트 복습(강의 자료) - 구글링 - 질문 [복습] // 공부0시간
구현/설계 [공부]

----------------------------------------------------------

SPA MPA

    SPA (Single Page Application)
    :말 그대로 페이지가 하나인 애플리케이션
    (.html 파일이 1개)
    react는 SPA 개발에 최적화, 사용자가 웹 사이트에 접속하면
    접속 당시 번들링된 리소스(html, css,js)를 전부 전달

    그리고 이를 캐싱(저장)해두었다가 url(주소)이 달라짐에 따라
    html의 내부를 수정(리랜더)해서 사용자에 보여주는 것

    따라서 react의 통상적인 파일 구조에는 index.html 파일
    하나로만 구성되어 있음
    

    MPA (Multi Page Application)
    : SPA와 반대로 페이지가 여러개인 애플리케이션
    (.html 파일 여러개)
    SSR 방식으로 요청마다 해당 페이지에 필요한 리소스를 받아온다

    * SPA는 한번에 페이지 랜더링에 필요한 리소스를 받아오는
    것이고, MPA는 요청마다 페이지에 필요한 리소스를 전달
    받는 것으로 이해

    SPA = 페이지(HTML)1개, MPA = 페이지(HTML) 여러개

----------------------------------------------------------

    * React는 CSR에 SPA이 최적화 되어있다.

----------------------------------------------------------

패키지(라이브러리)관리 툴

:라이브러리를 관리하고 설치할 수 있는 도구

ex) npm, npx, yarn, yarn2(yarn berry)



*** npm
  : nodeJS에서 기본적으로 설치되어있는 패키지 관리 툴
  ex) npm i(install) 라이브러리명 -- 설치
      npm rm(remove) 라이브러리명 -- 삭제

      npm i -g 라이브러리명 (노드 환경 전역에서 설치 npm 자체에서 설치)
      npm i -D 라이브러리명(개발용으로만 사용할 라이브러리를 설치)
        ex) 디버깅하는 툴(콘솔) => 사용자에게 보이면 안됌! (개발자만)
        

      설치확인방법 npm -v

* npx (ㄴ실행용 명령어다)
 : npm과 달리 설치하지 않고 라이브러리를 실행시켜주는 도구,
 npm과 npx 차이 느끼기가 애매
 단, npx를 사용하면 react project를 생성할 때 굉장히 무거운
 패키지를 사용하는데 이를 설치하지 않고도 프로젝트 생성이 가능하다
 npx도 마찬가지로 npm 5.2버전 이상에는 기본 설치

 => 설치해서 사용하는 것이 아닌 실행해서 사용할 수 있는 
 라이브러리들을 사용할 때

 ex) npx create-react-app 프로젝트명 : 리엑트 프로젝트를
 만드는 명령어


* yarn
과거 npm보다 속도, 안정성, 보안 모두 뛰어나 이목을 끌었다가
현재는 npm과의 차이가 거의 없다. 따라서 yarn 만을 사용하는 
것은 npm과 차이가 없기 때문에 사용하는 의미는 없다

npm을 가장 많이 쓰기 때문에 대중적으로 알려지지 않은
라이브러리들은 yarn을 지원하지 않는 경우가 있음

npm i -g yarn
yarn add 패키지명
yarn remove 패키지명


* yarn berry
  라이브러리가 설치되면 npm과 yarn의 경우는 node_modules라고
  하는 파일에 저장
  따라서 node_modules 파일은 엄청 무거움!

  pnp 방식을 도입 zero install
  알집으로 파일을 관리하고 있기 때문에 프로젝트 자체가 가볍고
  빌드가 빨라진다

  ** 모노레포 => 워크스페이스(폴더)를 통해 하나의 프로젝트에 여러개의
  프로젝트를 담고 관리할 수 있음

  본래 모노레포는 yarn과 turbo 라이브러리를 통해 구축하였으나
  yarn berry는 보다 모노레포에 최적화 되었는 패키지 관리 툴

  그러나, 다른 프로젝트를 한 폴더에 둔다는 것은 
  파일 및 폴더 구조가 복잡하고 신경써야하는 부분이 그만큼 더 늘어남
  따라서 초기에 적용하기는 적합하지 않고 이미 사용자가 충분히
  확보된 복잡한 프로젝트를 간단하게 만들기 위해 사용


---------------------------------------------------------

* React 프로젝트 생성

1. 터미널 명령어를 통해 내가 프로젝트를 생성하고자 하는 위치 경로를 맞춰야함
cd 파일명, cd 절대경로, cd ..

2. *명령어 npx create-react-app 프로젝트명  
(ㄴ프로젝트 폴더 생성)

    create-react-app (CRA) : webpack5(번들링도구)를 사용

    vite esBuild :  초보자가 사용하기에 적합치 않음
    CRA는 react에서 직접 만든 명령어 굉장히 편리한 라이브러리들이 이미 설치 및 셋팅
    CRA는 react에 필요한 모든 설정 파일을 대신 설정해준 라이브러리 
    (웹팩과 같은 번들링도구, 바벨과 같은 트랜스파일러)

    단점: 이미 설치된 도구를 커스텀하기 힘들다. 보통의 경우 커스텀을 할 떄는
    carco와 같은 cro 전용 설정 라이브러리를 통해 커스텀 해야 한다. 


3. npx create-react-app 프로젝트명(ex1)
    * 폴더 경로 꼭 확인
    cd ex1(프로젝트)
    npm start 서버 시작 

    * react 실행의 기본 port는 3000번
    따라서 프로젝트 실행 시 기본 주소는 http://localhost:3000


    서버 종료 = ctrl + c

---------------------------------------------------------

webpack
    모듈 번들러
      모듈 => 한가지 이상의 기능을 하는 분리된 코드의 집합, 덩어리
      번들러 => 묶어주는 것

      html, css, js, img와 같이
      너저분하게 분리되어 있는 리소스들을 확장자명 혹은 특정 기준으로 분류하고
      묶어주는 역할 

      모듈 번들러인 웹펙을 사용하면 잘 정돈 되어있는 데이터에서 필요한 리소스만
      찾을 수 있기 때문에 네트워크 연산 비용이 줄어들게 됨

      1. 모듈 단위의 개발이 가능
      2. 네트워크 연산 비용 감소
      3. loader라는 기능을 통해 js가 로드할 수 있는 상태로 컴파일(변환)


babel
  트랜스파일러  (번역기)
  트랜스파일러(번역기)
    ES6(ES2015) 이후 js- 모던 자바스크립트
    es-next
    es-2020

    이러한 최신 문법들을 이해하지 못하는 웹 브라우저 로더들이 해당 언어를
    이해할 수 있도록 저레벨의 문법으로 트랜스파일하여 이해할 수 있도록 변환

    * react에서 babel 중 4가지 모듈을 사용

    1. @babel/core 바벨을 구동시키기 위한 핵심 요소
    2. @babel/cli 명령어를 통해 cmd에서 바벨 명령어 사용 가능
    3. @babel/preset-env 바벨의 가장 기본적인 설정들
    4. @babel/preset-react 바벨을 JSX문법도 이해할 수 있도록 해주는 모듈

    JSX (react 문법)



---------------------------------------------------------

  * 개발자로서의 가치관?
  비즈니스를 이해하고 생산성에 기여하는 개발자


  * 생산성 있는 개발자 ?
    가치 및 이익을 창출할 수 있는 
---------------------------------------------------------

리엑트 프로젝트 구조
  node_modules --- 앞으로 여러분들이 설치 할 라이브러리들의 실제 파일
                  용량이 높은편 그래서 git에는 올리지 않습니다. 

  public - 정적 파일(변하지 않는 파일 - 이미지 같은거 ) 보관소 
            (index.html, facvicon, seo)
  ** src - 개발이 진행될 곳
  .gitignore - git에 올라가지 말아야할 파일

  package.json -- 설치된 라이브러리의 목록과 버전을 관리, 실행 스크립트(명령어)와
                  프로젝트 설정

  package-lock.json -- 라이브러리 설치 시, 라이브러리 설치에 필요한 정확한 정보

  * npm install(npm i)

---------------------------------------------------------

src의 구조
  src 
        App.css(ㄴ중요x) --> App.js 참조 되어있는 기본 css 파일
                    App.js, index.js는 react 구조상 index.html을 제외한 최상위 컴포넌트
                    app.css는 모든 컴포넌트에 적용

                    그러나 react에서 가장 많이 사용하는 것은 일반적인 css가 아닌
                    js안에 css를 작성할 수 있는 CSS-in-js를 활용
                    따라서 삭제해줘도 무방

                    (css-in-js에 전역스타일링 기능이 따로 탑재)

        App.js ---> routing, 라이브러리의 provider(일종의 설정 파일들-ㄴ이 라이브러리 사용하기 위해서 얘네들이 필요해!)
        App.test.js --> test 코드의 샘플
        
        index.css --> app.css와 동일
        index.js --> 최상위 컴포넌트의 index.html의 root에 app.js를 전달(랜더링)
        reportWebVitals.js(ㄴ별로안씀) ---> 프론트엔드 성능(퍼포먼스) 체크(라이트 하우스 체크)
        setupTests.js => 테스트코드의 전역 참조 설정 

----------------------------------------------------------


복습)

    CSR
        : 사용자가 페이지 랜더링 (프론트엔드 서버를 웹호스팅으로 연결)
    SSR 
        : 서버가 페이지 랜더링 (프론트엔드 웹서버 필요)
    SPA  
        : 페이지 1개
    MPA     
        : 페이지 여러개

    bundler
        : 모듈들 묶어주는 것
          정리가 잘 되요
    babel
        : 트랜스파일러 해석, 번역기 

----------------------------------------------------------------------------------

React는?
    CSR, SPA에 최적화

----------------------------------------------------------------------------------

ㄴ
1회차 영상 10분전 내용
ㄴ
ex1/public/index.html 은
=>src/index.js보여주고 얘는  => src/App.js 보여줌(화면에 보여지는 내용)
















 














