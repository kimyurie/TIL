* 부록

    SASS, SCSS
        css의 상위 문법, 편의성 제공
        참고: https://heropy.blog/2018/01/31/sass/

    
    ReactJS, AugluarJS, VueJS (.html(x) .js)

        1. styled-componets

        2. emotion

        -------------------------- css - in - js

        3. scss

-----------------------------------------------------------------

    tailwind CSS
        라이브러리(도구) => 편리하게 만드는 도구, 남의 작성한 편리한 도구 가져다 쓰는것

        ex)
            class="w256 h125 red borderbox buutton01" 
            => tailwind가 정해놓은 css가 그대로 적용
            => Bootstrap보다 자유도가 높음, 속도 빠름, 편리함
            => 클래스명 길어짐, 가독성 좋지 않음, 자유도가 떨어짐

            https://tailwindcss.com/

    Bootstrap
        twitter 기반으로 만들어진 UI/UX로 bootstrap에서 정해놓은 태그와 규칙을 사용하면
        Bootstrap에서 만든 UI를 그대로 가져다가 사용할 수 있음

        https://getbootstrap.com/

    antDesign
        https://ant.design/


    => tailwind나 bootStrap이나 결론적으론 만들어져있는 css를 내가 가져다가 쓸 수 있음

 --------------------------------------------------------------------------------

    git이란?
        git은 소스 코드 버전 관리 시스템

    버전 관리 시스템 종류
        클라이언트-서버모델
            하나의 중앙 서버에서 여러 클라이언트들(개발자)이 각자 필요한 데이터만 
            가져와 작업하고 다시 중앙으로 통합
                ex) CVS, SVN
        
        분산 모델
            하나의 중앙 서버 존재, 그러나 여러 클라이언트(개발자)들이 각자의 컴퓨터에
            복사본을 가지고와서 작업 후 저장
                ex) git

        ==> 차이점은 클라이언트-서버모델 중앙 서버가 사라지면 모두 사라짐
        그러나 분산모델은 각 개발자들이 코드를 가지고 있기 때문에 중앙서버가 사라져도
        코드 손실의 위험이 적다

    git의 장점?
        1. 협업하는 개발자들끼리 소스코드를 주고 받을 필요가 없음
        2. 같은 파일을 여러명이 동시에 병렬 개발 가능
        3. 변동 과정을 체계적으로 관리할 수 있음 (업데이트 히스토리 확인, 이전 버전 백업)
        4. 중앙 서버 데이터 유실 쉽게 복구 가능

    
    github, gitlab
        => git의 인터페이스를 제공, 다양한 기능을 통한 편의성 제공

        github란?
            - 개발자들의 간의 협력을 중점, 이슈 트래커 제공
            - 유료 계정이 없는 경우 모든 코드를 오픈 소스로 공개, 용량에 제한
            - 개인 유료 계정, 회사 단위의 유료 계정 (인당)
            - 업계 1위, 약 전 세계적으로 4000만명 이상의 개발자
              개발자 커뮤니티로 최고수준 이미 다른 개발자들이 만든
              소스 코드, 프로젝트 코드, 라이브러리 참고 가능

        gitlab이란?
            - github와 항상 같이 대립되는 클라우드(저장소)
            - 비공개 버전의 github, 무료로 비공개, 용량을 넉넉히 사용할 수 있음
            - 개발자들을 위한 도구들이 모두 설치되어있음 (따로 관리하지 않아도 된다)
            - 자체 호스팅 지원
            - 단, 이러한 도구들을 이용하면 유료 계정으로 전환

        github vs gitlab
            보통 개발자라면 github, 회사 단위라면 gitlab을 사용
            이 또한 회사마다 달라서 누가 승자인지는 확언할 수 었음, 장단점이 다름

            etc) Bitbucket가 있으나 가격 정책에 매우 높은 편이라 선호하지 않음

    CI/CD란?
        - 지속적인 통합 (Continuous Intergration)
        - 지속적인 배포 (Continuous Deployment) deploy(배포)

        개발 혹은 기능 수정 -> 통합(다른 개발자들끼리 개발된 기능과 배포중 프로젝트)
        - 빌드 및 테스트 -> 현재 배포 중인 프로젝트에 적용 -> 서버를 재가동\

        만약 CI/CD를 하지 않는다면 위와 같은 작업을 매번 기능을 수정될 때마다
        수작업으로 적용시켜야하나 CI/CD를 적용하면 간단한 명령어 만으로 위와 같은
        작업을 자동으로 수행

        대표적으로 github action, jenkins 등이 존재
        이러한 CI/CD의 논리는 DevOps 방식의 논리를 극한으로 끌어오리는 경우

    DevOps란? 
        - 운영과 개발을 하나로 하는 것 (합친 것)
        - 개발자들에게 운영만 해라고 하면 싫어함, 그렇다고 비개발자가 운영팀
          운영팀과 개발자팀과의 의사소통 불가
        - 이런 개발과 운녕을 하나로 함으로서 개발자들에 회유
        - 운영과 개발이 하나가 되면서 운영함으로서 개발자와 운영팀 사이의 의사소통
          협업, CI/CD 자동화 파이프라인 생성 등 작업 능률과 속도를 혁신적으로 상승

 ---------------------------------------------------------------------------------

    git 설치, 운영법

        git 설치
            1. 구글에 Git 설치 검색
            2. https://git-scm.com/downloads => 무지성 next
               (다운로드 확인법 터미널 혹은 cmd창에서 git --version)
            3. github 가입하기
            4. https://github.com/
     
            5. 터미널이나 cmd창에 해당 명령어 통해 깃허브 인증정보 등록
            (
                터미널은 vscode 우측 상단에서 vscode 자체 터미널을 이용하거나
                cmd는 윈도우에서 cmd 검색 후 접속
                mac os는 vscode 자체 터미널을 이용하거나 iterm2를 이용
            )
    	    git config --global user.email "깃허브 이메일주소"
		    git config --global user.name "깃허브 이름"
            등록되었는지 확인법 git config --list
            
            -------------------------------------------------------------
            * powershall 에서 git 명령어 인식 못하는 경우

                윈도우 - powershall - 관리자권한 실행

                Get-ExecutionPolicy
                Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
                => Y

            6. 에러가 생기신 분들 인증토큰 발급받고 인증토큰을 인증정보에 등록

 ---------------------------------------------------------------------------------
 
    git 운영법 (gif flow)

        branch
            나뭇가지, 나무에서 여러 갈래로 뻗은 줄기
            하나의 배포중인 서비스 (나무)
            그리고 brnach라고 하는 것은 특정 기능을 개발하거나 버그를 수정하거나 할 때
            또 하나의 길을 만들어내는 것

        add/commit
            add
                - 스테이징(임시저장소), 깃에서 수정된 파일을 보내기 전에 준비
            commit 
                - 깃에 파일을 보내는 것, 저장

        push/pull

            push
                - commit된 파일을 git에 있는 저장소(레퍼지토리)에 등록
            pull
                - 업데이트 된 git 저장소의 코드(파일)을 내 파일에 가지고 오는 것(적용)
                  현재 배포된 버전과 내 컴퓨터에 존재하는 내 버전과 맞추는 것

        pull request
            허락, merge 실행 시 데이터가 바로 적용되는 것이 아니라 pull request에
            등록하고 request에 등록된 사항을 허용해주어야 기본 branch에 push가 되는
            현상

            (내가 코드 수정했으니 검토해봐 -> 팀장님, 컨펌 부탁드립니다)
        
        merge
            새로 만들어지는 브런치와 기본 브런치를 합치는 것



    
 ---------------------------------------------------------------------------------

<다음주>

 git flow
 git을 flow에 맞게 사용 (개인, 조원)
 git bash, git desktop
 
 실전프로젝트 + 
 git hubpages, dothome 배포

 ---------------------------------------------------------------------------------
