

* CRA
 create-react-app의 줄임말, 리엑트에서 공식 발표한 리엑트
 프로젝트를 최신화 로드할 수 있다. 

 babal, webpack, lint, dotenv => 리엑트에 필요한 라이브러리
 혹은 설정들을 이미 셋팅한 상태에서 바로 프로젝트를 만들 수
 있도록 제공하는

 !명령어!
 npx create-react-app 프로젝트명
    +) test code 작성을 위한 라이브러리들도 설치

----------------------------------------------------------

    webpack

        모듈 번들러 
            모듈=>한가지의 기능을 하는 분리된 코드의 집합, 
            덩어리

            번들러=>묶어주는 것

        너저분하게 분리되어있는 모듈들을 포함한 페이지의
        리소스(html, css, js, img...) 확장자명 혹은
        특정 기준의 분류로 묶습니다. 

        ex) 외출을 위한 옷을 입고자 할 때 너저분하게
        흩어져있는 옷들 중 내가 원하는 옷을 찾아서 입는게
        빠를지, 분류별로 잘 정돈된 옷들 중에서 내가 원하는
        옷을 가지고 오는 것이 빠를지

        당연히 후자의 경우가 빠르기 때문에 모듈 번들러인
        웹팩을 사용하면, 네트워크 연산 비용이 획기적으로
        줄어들게 됨

        1. 모듈 단위의 개발이 가능
        2. 네트워크 연산 비용 줄어듬
        3. loader라는 기능을 통해 js가 로드할 수 있는 상태로
        컴파일(변환)

        대표적인 css-loader를 통해 js에 css 파일을 참조하여
        사용 가능
        babel loader... 다른 언어에 관한 로더, 최신 언어,
        구버전 언어//

----------------------------------------------------------

    babal

    트랜스파일러(번역기)
    ES6(ES2015) 이후 - 모던 자바스크립트
    es-next
    es-2020
    es-2022

    이러한 최신 문법을 브라우저 로더가 이해를 할 수 없는 경우
    가 있음
    이러한 것들을 ES5 이하의 문법으로 트랜스파일하여 이해할 수
    있도록 변환

    특이 JSX 문법을 사용하는 react의 경우는 바벨이 필수적으로
    사용된다

ㄴ npm init
초기파일 불러옴 
=> package.json 만듬
---------------------------------------------------------

.git ------ git init ㄴ명령어를 통해 생성했던 git에 대한 
기본 파일
node_modules --- 앞으로 여러분들이 설치 할 라이브러리들이 
담긴 파일
public ------ index.html(ㄴ사용자들이 보게될 html파일), 
facvicon(ㄴ아이콘 넣는뎅), manifest(ㄴ앱에 대한 설명),
             robots.txt(ㄴ검색엔진과 관련)
src ----- 개발을 진행하는 곳
.gitignore --- git에 올라가지 말아야할 파일
package-lock.json -- 라이브러리 설치 시, 라이브러리들의 
정확한 정보
package.json -- 설치된 라이브러리 관리, 실행 명령어 관리,
확장 프로그램 관리
README.md

---------------------------------------------------------

npm install 
npm i --------------> package.json 의존성이 부여된(설치된)
                    라이브러리 설치(node_moduels 설치)

----------------------------------------------------------



 폴더정리
    
    todolist 폴더에서
    __test__ 폴더 생성 후 App.jest.js를 여기로 옮기기
    
    todolist폴더 > src에서
    logo, index.css, app.css 삭제
    reportWebVitals.js 삭제

    ----> 프로젝트 실행 위치에서 --> npm start (프로젝트 실행)
          (todolist에 있는 파일을 지웠기 때문에 경로를 todolist로
          맞춰줘야 됌)

----------------------------------------------------------
 
 ㄴtodolist 폴더구조
 컴포넌트 구조(프론트엔드의 설계)

1. 좋은(효율적인, 생산성 높은) 컴포넌트 구조(프론트엔드의 설계)?
* 유지보수, 가독성, 재사용

2. 그렇다면 컴포넌트 구조 정답은 있는 것인가?
* 정답은 없음
* 회사마다, 프로젝트 규모마다, 프로젝트의 목적마다 컨벤션이
다름

3. 보편적인 프론트엔드 구조와 설계는 존재
 따라서 제가 지금부터 말씀 드릴 구조는 곧 정답이 아니며
 여러분들이 스스로 생각해서 재사용 가능한 구조가 맞는가 
 되짚어보며 스스로의 프론트엔드 설계를 찾는 것도 굉장히
 좋은 방향성으로 성장

 ----------------------------------------------------------

 ㄴtodolist > src >

components
공용으로 재사용되는 컴포넌트들이 들어갈 폴더
ex) 버튼, Alert(알림)창

pages
컴포넌트가 조립되는 공간, 도메인(url)별 분리하는 폴더

routes
url 설정 그 url에 따라 어떤 컴포넌트가 보여질지 정하는 폴더

styles
공용 혹은 재사용 및 전역으로 사용되는 css를 관리하는 폴더

utils
재사용 가능성이 있는 함수를 관리하는 폴더

목적과 라이브러리 사용 유무에 따라 폴더의 종류는 엄청 
많아집니다
..hooks, store, reduces, queries sagas recoil/atom...

--------------------------------------------------------

ㄴ 잘 사용하는 두가지 라이브러리

1) react-router-dom

    router => 네트워크 데이터 전송 = 소포
    react에서 dom을 전달하기 위해 사용하는 소포

    => 특정 url에 맞춰서 dom(Components)를/을 전달
    => url이 변함에 따라 다른 component를 보여주는 역할

    ex) npm i react-router-dom

    예를 들어 성용.com/login에 들어가면 
    => login 컴포넌트/페이지 를 보여줘 라는 뜻!

2) styled-components / emotion 
    
    CSS-in-js 라이브러리

    scss 혹은 css를 사용한다는 것은 모듈단위로 관리하는
    리엑트는 사용하기 어렵다 (휴면에러, 오버헤딩)

    따라서 css-in-js가 react에서 만큼은 확실히 생산성이 높다

    ex) npm i styled-components

+) npm trends 사이트
라이브러리 얼마나 많이 사용하나 비교해볼 수 있는 사이트
 https://www.npmtrends.com/

--------------------------------------------------------

day02 기준메몽
다음주
    react-router-dom
    styled-components

    [hooks] <--- react JSX문법으로 만들어진 state로 관리
    하는 함수
    useState, useEffect, useCallback, useMemo, useRef

복습할 것
    ** react 작동 원리, 핵심 컨셉
    * 폴더 정리, cra (웹팩, 바벨) -- 개념적인 복습(먼저)

예습할 것
    react-router-dom
    styled-components
    hooks <----------- 얘네는 쉬우니까



















