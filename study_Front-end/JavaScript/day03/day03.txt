
 타입변환
    
    자바스크립트는 모두 자료형을 가지고 있다. 그러나 이런 타입은 개발자의 의도에 따라
    변환할 수 있다. 또는 자바스크립트 엔진에 의해 암묵적으로 자동 변환될 수 있다

    let x = 10; // number
    let str = x.toString(); // 숫자를 문자열로 타입 캐스팅한다.
    console.log(typeof str) // stirng

    암묵적 타입 변환(강제 타입 변환)
    let x = 10;
    let str = 10 + ''; // string


    1. "문자열"
        1 + '2' // '12'
        1 - '1' // 0
        1 * '10' // 10

        명시적 타입 변환 ( ..toString )
        String(1:number) // string
        String(NaN) // string "NaN"

        1 + '' // "1"
        true + '' // "true"

    2. "숫자형"
        Number('0') // 0
        Number(true) // 1
        parseInt('0') // 0

    3. "불리언형"
        Boolean(1) // true
        Boolean(undefined) // false
        Boolean(NaN) // false
        Boolean('') // false
        Boolean('false') // true
        Boolean(null) // false

        Boolean({}) // true
        Boolean([]) // true


        1 * '10' // 10

--------------------------------------------------------------------------------------------------    

        * 객체

            자바스크립트는 객체(object) 기반의 스크립트 언어이며 자바스크립트를 이루고 있는 모든 것이 객체라고
            해도 무방하다.

            자바스크립트의 객체는 키(key)와 값(value)으로 구성된 프로퍼티(Property)들의 집합

            키
            집합에서 특정한 값을 차기 위해 다른 값들과 비교되는 값 (유니크)

            프로퍼티
            <input placeholder = "비밀번호를 입력해주세요 />
            키로 이름을 구별하고 해당 키의 값으로 구성되어있다.

            1. 리터럴
                리터럴이라는 것은 "메모리에 할당되는 값"
                let a = 5;
                let obj = {}

            2. 생성자 (x)
                let obj = new Object();

        
        ex) let seongyong = {
            name: "김성용",
            age: 20,
            height: 190
        }

        객체의 접근법

            1. 마침표 표기법
                console.log(seongyong.name) // "김성용"

            2. 대괄호 표기법
                console.log(seongyong["name"]) // "김성용"
                
                    ex) for (let item in seongyong) {
                        console.log(seongyong[item])
                     }

        * 객체는 왜 중요할까?

            1. 여러데이터를 공통된 주제로 묶을 수 있다.
                let kong = {
                    animal: "dog",
                    age: 14
                }

            2. JSON (JavaScript Object Notation)
                
                1. 데이터를 저장하거나 데이터 전송에 많이 사용되는 경량의 Data 교환방식
                2. 자바스크립트에서 객체를 만들 때 사용하는 표현식

                ex)

                Post = {
                    id: 1
                    title: "오늘은 좋은 하루입니다"
                    User: {
                        name: "김성용"
                        profile_img: https://이미지저장소.com
                    }
                    CreateAt: 2022.11.26
                    Content: "내용"
                    Comment: [{
                        content: "내용"
                        User: {
                            ....
                        }
                    }, {

                    }, {

                    }]
                }

        * 메서드
        해당 객체의 프러퍼티 값이 함수일 경우 일반 함수와 구분하기 위해 메서드라고 부른다.

-------------------------------------------------------------------------------------------------- 

        배열
            자바스크립트에서 배열은 이름과 인덱스로 참조되는 정렬된 값의 집합(객체)로 정의됩니다.
            배열을 구성하는 각각의 값을 배열 요소라고 하며, 배열의 위치를 가리키는 숫자를 인덱스라고 합니다.

        
        자바스크립트 배열의 특징
            1. 배열 요소의 타입이 고정되어 있지 않으므로, 같은 배열에 있는 요소는 타입이 다를 수 있다.
            2. 배열의 인덱스는 연속적이지 않아도 되며, 특정 배열 요소가 비어있을 수 있습니다.
            3. 자바스크립트의 배열은 Array라는 객체로 다루어집니다.

        배열의 표기법
            0개 이상의 값을 쉼표로 구분, 대괄호로 묶는다.
            첫번째 값의 인덱스는 '0'으로 읽는다.
            존재하지 않는 요소에 접근하면 값은 undefined이다.

        ex)
            const arr = [1,2,3,4,5];  => 

            const obj = {
                "0": 1,
                "1": 2,
                "2": 3
                ....
            }

            배열의 길이: arr.length ===> 5

-------------------------------------------------------------------------------------------------- 

        배열 내장함수 (length, pop, push, unshift, shift, concat, join, reverse, sort, slice, splice ... )

        배열명.length : 현재 원본 배열의 총 길이 (가지고 있는 방의 갯수)
        배열명.push() : 원본 배열의 맨 끝에 요소를 추가
        배열명.pop() : 원본 배열의 맨 끝 요소를 제거, 제거된 요소를 return
        배열명.unshift() : 원본 배열의 맨 처음에 요소를 추가
        배열명.shift(): 원본 배열의 맨 처음 값을 제거, 제거된 요소를 return
        
        베열명.concat() : 인자로 자신과 다른 배열을 받음, 두 배열을 합친 배열을 return
        ex)
            const arr1 = [...];
            const arr2 = [...];
            arr1.concat(arr2) ==> arr1과 arr2가 하나의 배열


        배열명.join() : 배열 요소 사이에 원하는 문자를 삽입한 문자열을 반환
        배열명.reverse() : 배열 역순 배치
        배열명.sort() : 배열의 정렬, 오름차순, 내림차순

        *
        배열명.splice(start, deleteCount, [items 1... ])
        - 기존 배열의 요소를 제거하고 해당 요소에 새로운 요소를 추가할 수 있다.
        - 삭제된 값을 배열로 반환
        - 배열 중간에 새로운 요소를 추가할 때도 사용한다


        배열명.slice(start, end)
        - 인자로 지정된 배열의 부분을 복사하여 반환합니다. 이때 원본 배열은 변경되지 않습니다.

        const a = [1,2,3,4,5]
        (* index는 0부터 시작한다)

        const newArr = a.slice(2,3);
        
        console.log(a) // [1,2,3,4,5]
        console.log(newArr) // [3]

        p.s
        indexOf
            원본 배열에서 요소의 값을 전달 받고 해당 값의 인덱스 번호를 검색
            값이 있다면 가장 처음 찾은 인덱스를 반환
            없을 경우 -1을 반환

        includes
            ES7(ES2016) 배열의 탐색, 값이 있는지 확인
            IE 9 이상

--------------------------------------------------------------------------------------------------

  