1주차 
day01 : javascript, nodejs, 변수, 자료형, 연산자, 조건식, 호이스팅, console, alert, confim
day02 : 제어문, 반복문, 함수형 프로그래밍(프로그래밍 패러다임), 함수, 모듈화, 지역변수, 전역변수

2주차
day03 : 객체, 메서드, 객체 접근법, 배열, 배열 고차함수, 배열 내장함수, 배열 생성 //
day04 : javascript의 메모리 부여방식, 깊은 복사, 얕은 복사, 전개연사자, ...rest, 빌트인객체 (Math, String, Date, Number ... ), 정규표현식

3주차
day05 : 새로운 수강생 복습 [1~2주차]
day06 : 이터러블 오브젝트, set, map, 이터러블 오브젝트의 for 문,  삼항연산자 , Truthy와 Falsy, ealry return, 비구조화 할당(구조분해)

4주차
day07 : DOM API selector ? NODE propoerties, addclass, removeclass, appendchild, create
day08 : 마우스 이벤트(존윅의 스코프이벤트), 배너이벤트, 스크롤이벤트, 메뉴이벤트

5주차
day09 : 자바스크립트의 스레드 , 비동기 / 동기, ajax, axios / fetch , api / restapi ?
json-server를 활용한 간단한 api 통신 (백엔드와의 통신), heroku - 배포, dothome - 배포

day10 : 자바스크립트의 실행 컨텍스트, 콭스택/ 이벤트큐/ 힙/ 가비지컬렉터 / 비동기 이벤트 루프 순서 / 
        this 바인딩

6주차 (보류, 문제 제공, 답변 질문, class, prototype, 객체지향)
day11 : 알고리즘 기초 문제 풀이(브론즈, lv0~1) 기본편
day12 : 알고리즘 기초 문제 풀이(브론즈~실버, lv1~2) 응용편

+ 이 날 이후 부터는 매일매일 꼬박꼬박 알고리즘 문제 풀이 시작
+ 한번 해보고 안되면 매일 오후 7시~8시 까지 합시다

-------------------------------------------------------------------------------------------------------

  JS(Java Script)

        1996년 3월
        ----> 10일 만에 태어난 언어
        "HTML 페이지를 동적으로 만드는 것" --> 가벼운 언어 --> 성능이 별로네?

        구글이 고민..
        2009년 v8 엔진(브라우저 엔진) 출시
        
 
   Java Script 와 Java
    Mocha -> LiveScript -> JavaScript

   성능을 어떻게 향상?
    
        * JS는 인터프리터 언어 ( vs 컴파일 언어)
            => 변환 과정 없이 소스 코드를 바로 실행하는 컴퓨터 프로그램 언어 ex. JS, python

          안녕하세요 => 기계어 => 01001010101010101

          컴파일언어
            A라는 언어 -> B라는 언어로 변환하는 과정
            ex) Java, C#, Swift와 같은 언어들을 컴퓨터가 이해할 수 있는 기계어로 변환


        *  v8 엔진
            필요에 따라 컴파일 과정을 거쳐 자바스크립트의 실행 성능을 높이는 엔진
            요즘 시대에는 브라우저의 v8엔진이 자바스크립트를 번역하고 실행한다


    => javsciprt는 별다른 번역 없이 사용하는 인터프리터 언어인데
       v8엔진으로 성능 높였다.

-------------------------------------------------------------------------------------------------------

    자바스크립트 적용법

    -내부-
    html 태그 안에
    <script>
        ... javsciprt
    </script>


    -외부-
    *.js
    <script src="경로"></script>

-------------------------------------------------------------------------------------------------------
    
    자바스크립트 입출력 (입력과 출력)

    -출력-
    console.log()
    console.error()
    alert()
    confirm()

    -입력- // 자주 사용되지 않습니다.
    prompt()

-------------------------------------------------------------------------------------------------------

    .js 확장자를 직접 실행 (브라우저를 키지 않고)

    NodeJS
        크롬의 V8엔진을 브라우저 바깥으로 꺼내어 JS를 실행시켜줄 수 있도록 하는 런타임(환경)
        reactJS와 같은 js 라이브러리들은 이 nodejs 환경 위에서 실행된다.

        https://nodejs.org/ko/

        설치 -> 설치 확인 node -v (v16.17.0)

-------------------------------------------------------------------------------------------------------

    자바스크립트의 자료형

        컴퓨터에서 어떠한 값(숫자, 영어, 한글[문자], 기능...) 을 사용하고자 함
        컴퓨터에게 값을 기억 시킬 필요가 있다.

        예를 들면
        나는 a라는 바구니에 숫자 5를 넣을거야. (선언)
        a라는 바구니에서 숫자를 5를 꺼내서 사용할거야 (실행)

        이러한 과정에서 a라는 바구니에는 숫자
        따라서 a 바구니의 자료형(데이터타입)은 NUMBER이며 숫자 외에는 들어갈 수 없다.

        이는 자바스크립트 뿐만 아니라
        Java, C 등 모든 언어들도 공통으로 갖고 있는 사항
        단지 자료형의 상태가 조금 다를 뿐만

        p.s Java는 숫자를 int, bigint, float, double..
            JS는 number로만 숫자를 표기

    자료형의 종류

      *원시타입
            boolean (true/false, 참/거짓)
            null (값이 명확히 비어있는 상태)
            undefined (값이 지정되지 않은 상태)
            number (정수, 실수를 구분하지 않음)
            string (문자열)
            symbol (이터러블 오브젝트의 키 값으로 사용)

      *객체타입
            object [집단]

            자바스크립트를 이루고 있는 거의 모든 것이 객체(object)
            원시 타입을 제외한 모든 타입

-------------------------------------------------------------------------------------------------------
    
    변수 (o)
      var, let, const

      자바스크립트에서 변수를 선언할 때 자료형(데이터타입)을 필요로하지 않습니다.
      이유는 자바스크립트는 인터프리터 언어로 기계어로 번역x
      따라서 실행되었을 때 자료형을 추론하여 부여

      ex) 
        다른 언어라면
        int a = 5;

        자바스크립트는
        let a = 5;
        const a = 5;

      js 숫자 5라는 값을 사용하고 싶다.

      => 여러번 사용할 수 도 있고, 
         알아보기 쉽게 이름을 주어서 어딘가에 담아두고 싶다.

         컴퓨터에게 기억 시키기 위하여
         변수 혹은 상수로 선언하여 사용하게 됩니다.

     변수의 선언
        let 변수명; (선언)
        변수명 = 값; (할당, 초기화)

        => let/var/const 변수명 = 값;
         
         ex)
         let a = 5;
         console.log(a); // 5

    변수의 종류

        * 변수 (변하는 수)
            let a = 5;
            a = 6;

        * 상수 (항상 같은 수)
            const a = 5;
            a = 6 (error)


    var
        let [* ES6, ES2015 * 이전] 에 사용했던
        문제점
            호이스팅
            자바스크립트는 실행 될 때 변수의 선언부를 먼저 평가(저장)
            따라서 변수에 값이 할당 되기 이전에 해당 변수를 사용 가능
            => 선언부가 마치 최상단으로 끌어올려지는 효과

            중복선언
            var a = 5
            a = 6

            var a = 5
            var a = 6

        개선하여 나온 것이 let, const
        간단하게 말하면 중복 선언할 때 error, 
        호이스팅으로 인해 값이 할당되기 전에 변수/상수를 사용하면 (reference error)

        => var, let 이전에 썼던 선언부

-------------------------------------------------------------------------------------------------------

    연산자

        산술연산자
            (+, -, *, /, %)

            let a = 5;
            let b = 2;

            a + b = 7;
            a - b = 3;
            a * b = 10;
            a / b = 2.5;
            a % b = 1;
            -----------------
            1 + true = 2; 
            (true = 1, false = 0)

            true + false = 1;
            1 + null = 1; (null = 0)
            1 + undefined = NaN (Not a Number)
        -----------------
        단항 산술 연산자
            ++ 값이 1 증가
            -- 값이 1 감소
            + 영향 x
            - 음수화
        -----------------
        전위 연산자

            a++ ==> 연산 후에 값을 더해라
            ++a ==> 연산 전에 값을 더해라
        -----------------
            ex)

            let a = 3;
            a++;
            console.log(a); // 4
        -----------------
        문자열 연결 연산자
            피연산자 중 하나 이상이 문자열인 경우 문자열로 동작

            '안'+'녕' => '안녕'
            '1' + 2 => '12'
        -----------------
        할당 연산자

        =
            ex) let a =  5;
        += 
        -=
        ex) 
            let a = 0;
            a += 5; (a = a+5) // 5 (값의 누적)

            let str = '안';
            str += '녕'; // '안녕'

        *=
        /=
        %=

        우선순위
            10 * (2 + 2)

-------------------------------------------------------------------------------------------------------

    논리 연산자, 비교 연산자 (조건식)
     : true / false 참이냐 거짓이냐

    비교 연산자
        == 동등비교      x == y (x와 y의 값이 같은지)
        === 일치비교     x === y (x와 y의 값과 자료형이 같은지)
        != 부등비교      x != y (x와 y의 값이 다른지)
        !== 불일치비교   x !== y (x와 y의 값과 타입이 다른지)

    논리 연산자
        || 논리합 (OR)
        && 논리곱 (AND)
        !  부정 (NOT)

        true || true // true
        true || flase // true
        false || true // true
        false || false // false => 하나라도 true면 true


        treu && true // true
        true && false // false
        false && true // false
        false && false // false => 둘다 true면 true

        !true // false
        !false // true => 반대


        ex)
        5 == '5' && 3 === 3 // true
        5 != 8  && 5 !== 3 // true


        let a = undefined;
        let b = 5;

        a === undefined && b == 3 // false
        a === undefined || b == 3 // true


        대개 조건식은 삼항연산자와 조건문에 이용된다.

-------------------------------------------------------------------------------------------------------

    